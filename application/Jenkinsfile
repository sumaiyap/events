pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS_ID = 'docker'
        DOCKER_REGISTRY = "sumaiyap"
        REPO_URL = "https://github.com/sumaiyap/events.git"
        AWS_DEFAULT_REGION = 'us-east-1'
        ACCOUNT_ID = "905418023088"

    }

    stages {
        stage('Login to Docker Hub') {
          steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKERHUB_CREDENTIALS_ID, usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        sh 'docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD'
                    }
                }
            } 
        }

        stage('Build and Push frontend') {
            steps {
                script {
                    dir('application/frontend/events') {
                        sh '''
                            id
                            ls -al
                            echo "current working dir: `pwd`"
                            docker build -t ${DOCKER_REGISTRY}/frontend:latest .
                            trivy image ${DOCKER_REGISTRY}/frontend:latest > frontend_report.txt
                            cat frontend_report.txt
                            docker push ${DOCKER_REGISTRY}/frontend:latest
                            docker rmi ${DOCKER_REGISTRY}/frontend:latest
                        '''
                    }
                }
            }
        }

        stage('Build and Push backend') {
            steps {
                script {
                    dir('application/backend') {
                        sh '''
                            id
                            ls -al
                            echo "current working dir: `pwd`"
                            docker build -t ${DOCKER_REGISTRY}/backend:latest .
                            trivy image ${DOCKER_REGISTRY}/backend:latest > backend_report.txt
                            cat backend_report.txt
                            docker push ${DOCKER_REGISTRY}/backend:latest
                            docker rmi ${DOCKER_REGISTRY}/backend:latest
                        '''
                    }
                }
            }
        }
        stage('Invoke Lambda Function') {
            steps {
                script {
                    def lambdaResponse = sh(script: 'aws lambda invoke --function-name "gitCloneAndDockerCompose" response.json', returnStdout: true)
                    echo lambdaResponse
                }
            }
        
    }


    }
}
